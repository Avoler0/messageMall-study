// import SendbirdChat from '@sendbird/chat'
// import { OpenChannelModule, SendbirdOpenChat } from '@sendbird/chat/openChannel';
import '@sendbird/uikit-react/dist/index.css';
import { sb } from './sb';
import { ApplicationUserListQuery, ApplicationUserListQueryParams, User } from '@sendbird/chat';
import { OpenChannel, OpenChannelCreateParams } from '@sendbird/chat/openChannel';
import { error } from 'console';
import { GroupChannel, GroupChannelCreateParams } from '@sendbird/chat/groupChannel';
import { useEffect } from 'react';


function Message() {

  async function userConnect(){
    try {
      const user = await sb.connect('d3fe89e1294460f5552007e281652165e0b2cdde');
      // The user is connected to the Sendbird server.
      console.log(4444,user)
    } catch (err) {
        // Handle error.
        console.log('에러',err)
    }
  }
  
  async function createChannel(){
    const channelParams: GroupChannelCreateParams  ={
      invitedUserIds: ['test2'],
      name: 'test',
      channelUrl: 'test-channel',
      coverUrl: 'https://avatars.githubusercontent.com/u/5143408?s=280&v=4', // Or .coverImage to upload a cover image file
      operatorUserIds: ['test1'],
      data:"{'background_color': 'yellow', 'description': 'preparing presentation'}",
      customType: 'test',
      isDistinct: false,
    }
    console.log('채널',channelParams)
    try{
      const channel: GroupChannel = await sb.groupChannel.createChannel(channelParams);
      console.log('성공')
    }catch(err){
      console.log('채널에러',err)
    }
    // const channelParams: OpenChannelCreateParams = {
    //   name: 'test',
    //   channelUrl: 'test-channel',
    //   coverUrlOrImage: 'https://avatars.githubusercontent.com/u/5143408?s=280&v=4',
    //   operatorUserIds: ['test1', 'test2'],
    //   customType: 'test',
    // };
    // try{
    //  const channel: OpenChannel = await sb.openChannel.createChannel(channelParams);
    //   console.log('성공',channel)
    // }catch(err){
    //   console.log('채널에러',err)
    // }
  }
  
  function submit(e:React.SyntheticEvent){
    e.preventDefault()
    const target = e.target as typeof e.target &{
      message: { value:string };
    }
    const message = target.message.value;
    
  }

  useEffect(() => {
    userConnect()
    createChannel();
  },[])
  
  return (
    <div className='w-80 h-96 border-2 rounded border-gray-300'>
      <div className='flex flex-col h-full p-3'>
        <div className='px-2 grow border-2 rounded border-gray-300'>
          <div className='text-left mt-2'>
            <div className='inline-block px-2 py-1 border-2 rounded-lg border-gray-300'>
              하이
            </div>
          </div>
          <div className='text-right mt-2'>
            <div className='inline-block px-2 py-1 border-2 rounded-lg border-gray-300'>
              반가워
            </div>
          </div>
        </div>
        <div className='h-1/6 mt-2 border-2 rounded border-gray-300'>
          <form className='flex h-full' onSubmit={submit}>
            <input type='text' className='w-full h-full p-2' name='message'/>
            <button className='h-full bg-transparent hover:bg-gray-300 text-gray-700 font-semibold hover:text-white py-0 px-4 border-x border-gray-300 hover:border-transparent rounded'>전송</button>
          </form>
        </div>
      </div>
    </div>
  )
}

export default Message;
